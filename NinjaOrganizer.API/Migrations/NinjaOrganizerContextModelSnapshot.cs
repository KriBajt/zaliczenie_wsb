// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NinjaOrganizer.API.Contexts;

namespace NinjaOrganizer.API.Migrations
{
    [DbContext(typeof(NinjaOrganizerContext))]
    partial class NinjaOrganizerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NinjaOrganizer.API.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Created");

                    b.Property<int>("Priority");

                    b.Property<int>("State");

                    b.Property<int>("TaskboardId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated");

                    b.HasKey("Id");

                    b.HasIndex("TaskboardId");

                    b.ToTable("Cards");

                    b.HasData(
                        new { Id = 1, Content = "opis zadanie 1 tablicy 1", Created = new DateTime(2020, 5, 10, 13, 41, 4, 368, DateTimeKind.Local), Priority = 0, State = 0, TaskboardId = 1, Title = "zadanie 1 tablicy 1" },
                        new { Id = 2, Content = "opis zadanie 2 tablicy 1", Created = new DateTime(2020, 5, 10, 13, 41, 4, 371, DateTimeKind.Local), Priority = 0, State = 1, TaskboardId = 1, Title = "zadanie 2 tablicy 1" },
                        new { Id = 3, Content = "owocowe lub karmelowe", Created = new DateTime(2020, 5, 9, 13, 41, 4, 371, DateTimeKind.Local), Priority = 0, State = 0, TaskboardId = 2, Title = "lody", Updated = new DateTime(2020, 5, 10, 13, 41, 4, 371, DateTimeKind.Local) },
                        new { Id = 4, Content = "mleczna biala", Created = new DateTime(2020, 5, 10, 13, 41, 4, 371, DateTimeKind.Local), Priority = 2, State = 0, TaskboardId = 2, Title = "czekolada" },
                        new { Id = 5, Content = "kolor farby bezowy lub jasnoniebieski", Created = new DateTime(2020, 5, 10, 13, 41, 4, 371, DateTimeKind.Local), Priority = 1, State = 1, TaskboardId = 3, Title = "pomalowac sciany" }
                    );
                });

            modelBuilder.Entity("NinjaOrganizer.API.Entities.Taskboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Updated");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Taskboards");

                    b.HasData(
                        new { Id = 1, Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "opis tablicy pierwszej", Title = "Tablica 1", UserId = 1 },
                        new { Id = 2, Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "Lista zakupow", Title = "Zakupy", UserId = 1 },
                        new { Id = 3, Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "opis remontu", Title = "Remont", UserId = 1 }
                    );
                });

            modelBuilder.Entity("NinjaOrganizer.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, FirstName = "First name1", LastName = "Last name1", Username = "Username1" }
                    );
                });

            modelBuilder.Entity("NinjaOrganizer.API.Entities.Card", b =>
                {
                    b.HasOne("NinjaOrganizer.API.Entities.Taskboard", "Taskboard")
                        .WithMany("Cards")
                        .HasForeignKey("TaskboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NinjaOrganizer.API.Entities.Taskboard", b =>
                {
                    b.HasOne("NinjaOrganizer.API.Entities.User", "User")
                        .WithMany("Taskboards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
